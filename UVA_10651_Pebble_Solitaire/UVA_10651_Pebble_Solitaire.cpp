// UVa 10651 - Pebble Solitaire
// Adrian Dale 25/09/2012
// http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=437&page=show_problem&problem=1592
//
// This one turned out really easy - I think the limits are just too low:
// 10649556 	10651 	Pebble Solitaire 	Accepted 	C++ 	0.008 	2012-09-25 11:42:08
// I'm ranked 848th out of 1176 solvers. However, I knew my first cut wasn't great as it does
// a lot of converting from bits to string. I could speed that up by doing everything with
// bits. Or, for even more fun, create a hardcoded lookup table in advance and use that instead!
// (I also think that because it is an old puzzle that all the top times are recorded as 0.000,
// which could mean they are anything)
//
// This is the "cheat" version with a lookup table. It actually runs in exactly the same
// time on the online judge as the non-cheat version.
#include <iostream>
#include <sstream>
#include <string>
#include <ctime>
#include <vector>
#include <algorithm>
#include <cstring>
using namespace std;

int StringToBits(string &s)
{
	int result = 0;
	for(unsigned int i=0; i<s.length(); ++i)
		if (s[i] == 'o')
			result |= (1<<i);
	return result;
}

int Memo[] = {
0,1,1,1,1,2,1,2,1,2,2,1,1,1,2,2,1,2,
2,2,2,3,1,2,1,2,1,2,2,2,2,3,1,2,2,
2,2,3,2,3,2,3,3,1,1,2,2,1,1,2,2,1,
1,1,2,2,2,3,2,2,2,1,3,3,1,2,2,2,2,
3,2,3,2,3,3,2,2,2,3,3,2,3,3,3,3,4,
1,2,1,2,2,2,2,3,1,2,1,2,2,2,2,3,1,
2,1,2,1,2,2,2,2,2,2,3,3,2,2,2,2,3,
2,3,1,2,3,2,3,4,1,2,2,2,2,3,2,3,2,
3,3,2,2,2,3,3,2,3,3,3,3,4,2,3,2,3,
2,3,3,3,3,4,2,3,3,3,3,4,3,4,3,4,4,
1,1,2,2,2,1,2,2,2,2,2,2,3,2,3,3,1,
1,2,2,1,1,2,2,2,2,3,2,3,2,3,3,1,1,
2,2,1,1,2,2,1,1,1,2,2,2,3,2,2,2,1,
2,3,2,3,3,3,3,4,2,3,2,3,2,2,2,3,3,
1,2,3,3,1,1,2,2,1,3,4,2,3,3,1,4,4,
1,2,2,2,2,3,2,3,2,3,3,2,2,2,3,3,2,
3,3,3,3,4,2,3,2,3,2,3,3,3,3,4,2,3,
3,3,3,4,3,4,3,4,4,2,2,3,3,2,2,3,3,
2,2,2,3,3,3,4,3,3,3,2,4,4,2,3,3,3,
3,4,3,4,3,4,4,3,3,3,4,4,3,4,4,4,4,
5,1,2,1,2,2,2,2,3,2,3,1,2,2,2,2,3,
2,3,2,3,2,2,2,2,3,3,2,3,3,3,3,3,1,
2,1,2,2,2,2,3,1,2,1,2,2,2,2,3,2,3,
2,3,3,2,2,2,3,3,2,3,3,3,3,4,1,2,1,
2,2,2,2,3,1,2,1,2,2,2,2,3,1,2,1,2,
1,2,2,2,2,2,2,3,3,2,2,2,2,3,2,3,1,
2,2,2,3,2,2,3,3,3,3,4,3,4,3,4,4,2,
2,3,3,2,2,3,3,2,2,2,2,3,2,3,3,3,3,
2,1,2,2,3,3,3,3,4,1,2,1,2,2,2,2,3,
1,2,3,4,4,2,2,3,3,2,3,4,1,2,4,2,4,
5,1,2,2,2,2,3,2,3,2,3,3,2,2,2,3,3,
2,3,3,3,3,4,2,3,2,3,2,3,3,3,3,4,2,
3,3,3,3,4,3,4,3,4,4,2,2,3,3,2,2,3,
3,2,2,2,3,3,3,4,3,3,3,2,4,4,2,3,3,
3,3,4,3,4,3,4,4,3,3,3,4,4,3,4,4,4,
4,5,2,3,2,3,3,3,3,4,2,3,2,3,3,3,3,
4,2,3,2,3,2,3,3,3,3,3,3,4,4,3,3,3,
3,4,3,4,2,3,4,3,4,5,2,3,3,3,3,4,3,
4,3,4,4,3,3,3,4,4,3,4,4,4,4,5,3,4,
3,4,3,4,4,4,4,5,3,4,4,4,4,5,4,5,4,
5,5,1,1,2,2,2,1,2,2,2,2,3,2,3,2,3,
3,2,2,2,3,2,1,2,2,2,2,3,2,3,2,3,3,
2,2,2,3,2,2,3,3,2,2,2,2,3,2,3,2,3,
3,2,3,4,2,3,3,3,3,4,3,4,3,4,3,1,1,
2,2,2,1,2,2,2,2,2,2,2,2,3,3,1,1,2,
2,1,1,2,2,2,2,3,2,3,2,3,3,2,2,2,3,
3,2,3,3,3,3,4,2,3,2,3,2,3,3,3,3,4,
2,3,3,3,3,4,3,4,3,4,4,1,1,2,2,2,1,
2,2,2,2,2,2,3,2,3,3,1,1,2,2,1,1,2,
2,2,2,3,2,3,2,3,3,1,1,2,2,1,1,2,2,
1,1,1,2,2,2,3,2,2,2,1,2,3,2,3,3,3,
3,4,2,3,2,3,2,2,2,3,3,1,2,3,3,1,1,
2,2,1,2,3,2,3,3,1,2,3,2,3,3,3,3,4,
3,4,3,4,4,3,3,3,4,4,3,4,4,4,4,5,2,
3,2,3,3,3,3,4,2,3,2,3,3,3,3,4,2,3,
2,3,2,2,2,3,3,3,2,3,3,3,3,3,3,4,3,
4,2,1,1,2,2,2,2,3,3,3,3,4,3,4,3,4,
4,1,1,2,2,2,1,2,2,2,2,2,2,3,2,3,3,
1,1,2,2,1,3,4,4,4,4,5,2,3,2,3,3,3,
3,4,2,1,3,4,4,1,1,2,2,2,4,5,2,3,4,
1,5,5,1,2,2,2,2,3,2,3,2,3,3,2,2,2,
3,3,2,3,3,3,3,4,2,3,2,3,2,3,3,3,3,
4,2,3,3,3,3,4,3,4,3,4,4,2,2,3,3,2,
2,3,3,2,2,2,3,3,3,4,3,3,3,2,4,4,2,
3,3,3,3,4,3,4,3,4,4,3,3,3,4,4,3,4,
4,4,4,5,2,3,2,3,3,3,3,4,2,3,2,3,3,
3,3,4,2,3,2,3,2,3,3,3,3,3,3,4,4,3,
3,3,3,4,3,4,2,3,4,3,4,5,2,3,3,3,3,
4,3,4,3,4,4,3,3,3,4,4,3,4,4,4,4,5,
3,4,3,4,3,4,4,4,4,5,3,4,4,4,4,5,4,
5,4,5,5,2,2,3,3,3,2,3,3,3,3,3,3,4,
3,4,4,2,2,3,3,2,2,3,3,3,3,4,3,4,3,
4,4,2,2,3,3,2,2,3,3,2,2,2,3,3,3,4,
3,3,3,2,3,4,3,4,4,4,4,5,3,4,3,4,3,
3,3,4,4,2,3,4,4,2,2,3,3,2,4,5,3,4,
4,2,5,5,2,3,3,3,3,4,3,4,3,4,4,3,3,
3,4,4,3,4,4,4,4,5,3,4,3,4,3,4,4,4,
4,5,3,4,4,4,4,5,4,5,4,5,5,3,3,4,4,
3,3,4,4,3,3,3,4,4,4,5,4,4,4,3,5,5,
3,4,4,4,4,5,4,5,4,5,5,4,4,4,5,5,4,
5,5,5,5,6,1,2,1,2,2,2,2,3,2,3,1,2,
2,2,2,3,2,3,2,3,3,2,2,2,3,3,2,3,3,
3,3,4,2,3,2,3,2,3,3,3,2,3,1,2,2,2,
2,3,2,3,2,3,3,2,2,2,3,3,2,3,3,3,3,
4,2,3,2,3,2,3,3,3,2,3,2,3,3,3,3,4,
2,3,2,3,2,2,2,3,3,2,2,3,3,2,2,2,3,
3,3,4,2,3,3,2,4,3,2,3,3,3,3,4,3,4,
3,4,4,3,3,3,4,3,3,4,4,3,3,3,1,2,1,
2,2,2,2,3,2,3,1,2,2,2,2,3,2,3,2,3,
2,2,2,2,2,3,2,3,3,3,3,3,1,2,1,2,2,
2,2,3,1,2,1,2,2,2,2,3,2,3,2,3,3,2,
2,2,3,3,2,3,3,3,3,4,2,3,2,3,2,3,3,
3,3,4,2,3,3,3,3,4,3,4,3,4,4,2,2,3,
3,2,2,3,3,2,2,2,3,3,3,4,3,3,3,2,4,
4,2,3,3,3,3,4,3,4,3,4,4,3,3,3,4,4,
3,4,4,4,4,5,1,2,1,2,2,2,2,3,2,3,1,
2,2,2,2,3,2,3,2,3,2,2,2,2,3,3,2,3,
3,3,3,3,1,2,1,2,2,2,2,3,1,2,1,2,2,
2,2,3,2,3,2,3,3,2,2,2,3,3,2,3,3,3,
3,4,1,2,1,2,2,2,2,3,1,2,1,2,2,2,2,
3,1,2,1,2,1,2,2,2,2,2,2,3,3,2,2,2,
2,3,2,3,1,2,2,2,3,2,2,3,3,3,3,4,3,
4,3,4,4,2,2,3,3,2,2,3,3,2,2,2,2,3,
2,3,3,3,3,2,1,2,2,3,3,3,3,4,1,2,1,
2,2,2,2,3,1,2,2,3,3,2,2,3,3,2,3,4,
1,2,2,2,3,2,2,3,3,3,3,4,3,4,3,4,4,
3,3,3,4,4,3,4,4,4,4,5,3,4,3,4,3,4,
4,4,4,5,3,4,4,4,4,5,4,5,4,5,5,2,2,
3,3,3,2,3,3,3,3,3,3,4,3,4,4,2,2,3,
3,2,2,3,3,3,3,4,3,4,3,4,4,2,2,3,3,
2,2,3,3,2,2,2,2,3,2,3,3,3,3,2,3,4,
2,3,3,3,3,4,3,4,3,4,3,3,3,3,4,2,3,
4,4,2,2,3,1,2,1,2,2,2,2,2,2,3,2,3,
3,3,3,4,3,4,3,4,4,3,3,3,4,4,3,4,4,
4,4,5,1,2,1,2,2,2,2,3,2,3,1,2,2,2,
2,3,2,3,2,3,2,2,2,2,3,3,2,3,3,3,3,
3,1,2,1,2,2,2,2,3,1,2,3,4,4,4,4,5,
4,5,4,5,5,2,2,3,3,3,2,3,3,3,3,3,3,
4,3,4,4,2,2,3,1,2,3,4,4,4,4,5,1,2,
1,2,2,2,2,3,2,2,4,5,5,2,2,3,3,3,4,
5,1,2,5,2,5,6,1,2,2,2,2,3,2,3,2,3,
3,2,2,2,3,3,2,3,3,3,3,4,2,3,2,3,2,
3,3,3,3,4,2,3,3,3,3,4,3,4,3,4,4,2,
2,3,3,2,2,3,3,2,2,2,3,3,3,4,3,3,3,
2,4,4,2,3,3,3,3,4,3,4,3,4,4,3,3,3,
4,4,3,4,4,4,4,5,2,3,2,3,3,3,3,4,2,
3,2,3,3,3,3,4,2,3,2,3,2,3,3,3,3,3,
3,4,4,3,3,3,3,4,3,4,2,3,4,3,4,5,2,
3,3,3,3,4,3,4,3,4,4,3,3,3,4,4,3,4,
4,4,4,5,3,4,3,4,3,4,4,4,4,5,3,4,4,
4,4,5,4,5,4,5,5,2,2,3,3,3,2,3,3,3,
3,3,3,4,3,4,4,2,2,3,3,2,2,3,3,3,3,
4,3,4,3,4,4,2,2,3,3,2,2,3,3,2,2,2,
3,3,3,4,3,3,3,2,3,4,3,4,4,4,4,5,3,
4,3,4,3,3,3,4,4,2,3,4,4,2,2,3,3,2,
4,5,3,4,4,2,5,5,2,3,3,3,3,4,3,4,3,
4,4,3,3,3,4,4,3,4,4,4,4,5,3,4,3,4,
3,4,4,4,4,5,3,4,4,4,4,5,4,5,4,5,5,
3,3,4,4,3,3,4,4,3,3,3,4,4,4,5,4,4,
4,3,5,5,3,4,4,4,4,5,4,5,4,5,5,4,4,
4,5,5,4,5,5,5,5,6,2,3,2,3,3,3,3,4,
3,4,2,3,3,3,3,4,3,4,3,4,3,3,3,3,4,
4,3,4,4,4,4,4,2,3,2,3,3,3,3,4,2,3,
2,3,3,3,3,4,3,4,3,4,4,3,3,3,4,4,3,
4,4,4,4,5,2,3,2,3,3,3,3,4,2,3,2,3,
3,3,3,4,2,3,2,3,2,3,3,3,3,3,3,4,4,
3,3,3,3,4,3,4,2,3,3,3,4,3,3,4,4,4,
4,5,4,5,4,5,5,3,3,4,4,3,3,4,4,3,3,
3,3,4,3,4,4,4,4,3,2,3,3,4,4,4,4,5,
2,3,2,3,3,3,3,4,2,3,4,5,5,3,3,4,4,
3,4,5,2,3,5,3,5,6,2,3,3,3,3,4,3,4,
3,4,4,3,3,3,4,4,3,4,4,4,4,5,3,4,3,
4,3,4,4,4,4,5,3,4,4,4,4,5,4,5,4,5,
5,3,3,4,4,3,3,4,4,3,3,3,4,4,4,5,4,
4,4,3,5,5,3,4,4,4,4,5,4,5,4,5,5,4,
4,4,5,5,4,5,5,5,5,6,3,4,3,4,4,4,4,
5,3,4,3,4,4,4,4,5,3,4,3,4,3,4,4,4,
4,4,4,5,5,4,4,4,4,5,4,5,3,4,5,4,5,
6,3,4,4,4,4,5,4,5,4,5,5,4,4,4,5,5,
4,5,5,5,5,6,4,5,4,5,4,5,5,5,5,6,4,
5,5,5,5,6,5,6,5,6,6,1,1,2,2,2,1,2,
2,2,2,3,2,3,2,3,3,2,2,2,3,3,1,2,2,
2,2,3,2,3,2,3,3,2,2,2,3,3,2,3,3,3,
3,3,2,3,2,3,2,3,3,3,3,4,2,3,3,3,3,
4,3,4,3,4,4,2,2,3,3,2,2,3,3,2,2,2,
3,3,3,4,3,2,2,2,3,2,1,2,2,2,2,3,2,
3,2,3,3,2,2,2,3,3,2,3,3,3,3,4,2,3,
2,3,2,3,3,3,3,4,2,3,3,3,3,4,3,4,3,
4,4,2,2,3,3,2,2,3,3,2,2,2,3,3,3,4,
3,2,2,2,3,2,2,3,3,3,3,4,3,4,3,4,4,
2,2,3,3,2,2,3,3,2,2,2,2,3,2,3,3,3,
3,2,2,3,2,3,3,3,3,4,2,3,2,3,2,3,3,
3,3,2,3,4,4,2,2,3,3,2,3,4,2,3,4,2,
3,4,2,3,3,3,3,4,3,4,3,4,4,3,3,3,4,
4,3,4,4,4,4,5,3,4,3,4,3,4,4,4,3,4,
3,4,4,4,4,5,3,4,3,4,3,1,1,2,2,2,1,
2,2,2,2,3,2,3,2,3,3,2,2,2,3,2,1,2,
2,2,2,3,2,3,2,3,3,2,2,2,3,2,2,3,3,
2,2,2,2,3,2,3,2,2,2,2,3,2,2,3,3,3,
3,4,3,4,3,4,3,1,1,2,2,2,1,2,2,2,2,
2,2,2,2,3,3,1,1,2,2,1,1,2,2,2,2,3,
2,3,2,3,3,2,2,2,3,3,2,3,3,3,3,4,2,
3,2,3,2,3,3,3,3,4,2,3,3,3,3,4,3,4,
3,4,4,2,2,3,3,2,2,3,3,2,2,2,3,3,3,
4,3,3,3,2,4,4,2,3,3,3,3,4,3,4,3,4,
4,3,3,3,4,4,3,4,4,4,4,5,2,3,2,3,3,
3,3,4,2,3,2,3,3,3,3,4,2,3,2,3,2,3,
3,3,3,3,3,4,4,3,3,3,3,4,3,4,2,3,4,
3,4,5,2,3,3,3,3,4,3,4,3,4,4,3,3,3,
4,4,3,4,4,4,4,5,3,4,3,4,3,4,4,4,4,
5,3,4,4,4,4,5,4,5,4,5,5,1,1,2,2,2,
1,2,2,2,2,3,2,3,2,3,3,2,2,2,3,2,1,
2,2,2,2,3,2,3,2,3,3,2,2,2,3,2,2,3,
3,2,2,2,2,3,2,3,2,3,3,2,3,4,2,3,3,
3,3,4,3,4,3,4,3,1,1,2,2,2,1,2,2,2,
2,2,2,2,2,3,3,1,1,2,2,1,1,2,2,2,2,
3,2,3,2,3,3,2,2,2,3,3,2,3,3,3,3,4,
2,3,2,3,2,3,3,3,3,4,2,3,3,3,3,4,3,
4,3,4,4,1,1,2,2,2,1,2,2,2,2,2,2,3,
2,3,3,1,1,2,2,1,1,2,2,2,2,3,2,3,2,
3,3,1,1,2,2,1,1,2,2,1,1,1,2,2,2,3,
2,2,2,1,2,3,2,3,3,3,3,4,2,3,2,3,2,
2,2,3,3,1,2,3,3,1,1,2,2,1,2,3,2,3,
3,1,2,3,2,3,3,3,3,4,3,4,3,4,4,3,3,
3,4,4,3,4,4,4,4,5,2,3,2,3,3,3,3,4,
2,3,2,3,3,3,3,4,2,3,2,3,2,2,2,3,3,
3,2,3,3,3,3,3,3,4,3,4,2,1,1,2,2,2,
2,3,3,3,3,4,3,4,3,4,4,1,1,2,2,2,1,
2,2,2,2,2,2,3,2,3,3,1,1,2,2,1,2,3,
3,3,3,4,2,3,2,3,3,3,3,3,2,1,3,4,4,
1,1,2,2,2,2,3,2,3,3,1,2,3,2,3,3,3,
3,4,3,4,3,4,4,3,3,3,4,4,3,4,4,4,4,
5,3,4,3,4,3,4,4,4,4,5,3,4,4,4,4,5,
4,5,4,5,5,3,3,4,4,3,3,4,4,3,3,3,4,
4,4,5,4,4,4,3,5,5,3,4,4,4,4,5,4,5,
4,5,5,4,4,4,5,5,4,5,5,5,5,6,2,3,2,
3,3,3,3,4,3,4,2,3,3,3,3,4,3,4,3,4,
3,3,3,3,4,4,3,4,4,4,4,4,2,3,2,3,3,
3,3,4,2,3,2,3,3,3,3,4,3,4,3,4,4,3,
3,3,4,4,3,4,4,4,4,5,2,3,2,3,3,3,3,
4,2,3,2,3,3,3,3,4,2,3,2,3,2,2,2,3,
3,3,2,3,3,3,3,3,3,4,3,4,2,3,3,3,4,
3,2,3,3,3,3,4,3,4,3,4,4,3,3,3,4,3,
3,4,4,3,3,3,3,4,3,4,3,4,4,3,2,3,3,
4,4,4,4,5,2,3,2,3,3,1,1,2,2,2,1,2,
2,2,2,3,2,3,2,3,2,2,2,2,3,2,2,3,3,
3,3,4,3,4,3,4,4,3,3,3,4,4,3,4,4,4,
4,5,3,4,3,4,3,4,4,4,4,5,3,4,4,4,4,
5,4,5,4,5,5,1,1,2,2,2,1,2,2,2,2,3,
2,3,2,3,3,2,2,2,3,2,1,2,2,2,2,3,2,
3,2,3,3,2,2,2,3,2,2,3,3,2,2,2,2,3,
2,3,2,3,3,2,3,4,2,3,3,3,3,4,3,4,3,
4,3,1,1,2,2,2,1,2,2,2,2,2,2,2,2,3,
3,1,1,2,2,1,3,4,4,4,4,5,4,5,4,5,5,
4,4,4,5,5,4,5,5,5,5,6,2,3,2,3,3,3,
3,4,3,4,2,3,3,3,3,4,3,4,3,4,3,3,3,
3,4,4,3,4,4,4,4,4,2,3,2,3,3,1,1,2,
2,2,3,4,4,4,4,5,4,5,4,5,5,1,1,2,2,
2,1,2,2,2,2,3,2,3,2,3,3,2,2,2,2,2,
4,5,5,5,5,6,2,3,2,3,3,3,3,4,3,1,4,
5,5,1,1,2,2,2,5,6,2,3,5,1,6,12 };

void ReadTestCases()
{
	string line;
	getline(cin, line);
	istringstream parser(line);
	int TestCount;
	parser >> TestCount;

	while(TestCount-- > 0)
	{
		getline(cin, line);
		

#ifndef ONLINE_JUDGE
		clock_t starttime = clock();
#endif
		
		cout << Memo[ StringToBits(line) ] << endl;

#ifndef ONLINE_JUDGE
		double endtime = (clock() - starttime) / static_cast<double>(CLOCKS_PER_SEC);

		cout << "Time Taken: " << endtime << " seconds" << endl;
#endif
	}
}

int main()
{
#ifndef ONLINE_JUDGE
		clock_t starttime = clock();
#endif
	
	ReadTestCases();
	
#ifndef ONLINE_JUDGE
		double endtime = (clock() - starttime) / static_cast<double>(CLOCKS_PER_SEC);

		cout << "Total Time Taken: " << endtime << " seconds" << endl;
#endif
	return 0;
}